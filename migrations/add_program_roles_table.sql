-- Migration: Create program_roles lookup table
-- Date: 2025-10-21
-- Purpose: Add lookup table for responsible roles used in items and tasks

BEGIN;

-- ============================================================================
-- 1. CREATE TABLE
-- ============================================================================

CREATE TABLE IF NOT EXISTS public.program_roles (
  program_role_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  role_name text NOT NULL UNIQUE,
  description text,
  display_color text DEFAULT '#808080',
  display_order integer DEFAULT 0,
  active_flag boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  created_by uuid DEFAULT auth.uid(),
  updated_at timestamp with time zone DEFAULT now(),
  updated_by uuid DEFAULT auth.uid(),
  
  CONSTRAINT program_roles_role_name_not_empty CHECK (char_length(role_name) > 0),
  CONSTRAINT program_roles_display_color_format CHECK (display_color ~ '^#[0-9A-Fa-f]{6}$')
);

-- Add table comment
COMMENT ON TABLE public.program_roles IS 
  'Lookup table for responsible roles assigned to program items and tasks (e.g., Coordinator, Admin, Member)';

-- Add column comments
COMMENT ON COLUMN public.program_roles.program_role_id IS 
  'Primary key - auto-generated';
COMMENT ON COLUMN public.program_roles.role_name IS 
  'Name of the role (unique)';
COMMENT ON COLUMN public.program_roles.description IS 
  'Description of the role and responsibilities';
COMMENT ON COLUMN public.program_roles.display_color IS 
  'Hex color code for UI display (e.g., #1976d2)';
COMMENT ON COLUMN public.program_roles.display_order IS 
  'Sort order for displaying roles in UI (lower numbers first)';
COMMENT ON COLUMN public.program_roles.active_flag IS 
  'Whether this role is active and available for selection';
COMMENT ON COLUMN public.program_roles.created_at IS 
  'Timestamp when record was created';
COMMENT ON COLUMN public.program_roles.created_by IS 
  'User ID who created the record';
COMMENT ON COLUMN public.program_roles.updated_at IS 
  'Timestamp when record was last updated';
COMMENT ON COLUMN public.program_roles.updated_by IS 
  'User ID who last updated the record';

-- ============================================================================
-- 2. ADD FOREIGN KEY CONSTRAINTS
-- ============================================================================

ALTER TABLE public.program_roles
  ADD CONSTRAINT program_roles_created_by_fkey 
  FOREIGN KEY (created_by) 
  REFERENCES public.users(id);

ALTER TABLE public.program_roles
  ADD CONSTRAINT program_roles_updated_by_fkey 
  FOREIGN KEY (updated_by) 
  REFERENCES public.users(id);

-- ============================================================================
-- 3. CREATE INDEXES
-- ============================================================================

CREATE INDEX idx_program_roles_active 
  ON public.program_roles(active_flag) 
  WHERE active_flag = true;

CREATE INDEX idx_program_roles_display_order 
  ON public.program_roles(display_order);

-- ============================================================================
-- 4. ENABLE ROW LEVEL SECURITY (RLS)
-- ============================================================================

ALTER TABLE public.program_roles ENABLE ROW LEVEL SECURITY;

-- Policy: Allow authenticated users full access
CREATE POLICY authenticated_access_program_roles
  ON public.program_roles
  FOR ALL
  TO authenticated
  USING (true);

-- Policy: Allow service role full access
CREATE POLICY service_role_bypass_program_roles
  ON public.program_roles
  FOR ALL
  TO service_role
  USING (true);

-- ============================================================================
-- 5. CREATE TRIGGER FOR UPDATED_AT
-- ============================================================================

CREATE TRIGGER update_program_roles_timestamp
  BEFORE UPDATE ON public.program_roles
  FOR EACH ROW
  EXECUTE FUNCTION update_timestamp_function();

-- ============================================================================
-- 6. SEED INITIAL DATA
-- ============================================================================

INSERT INTO public.program_roles (
  role_name, 
  description, 
  display_color, 
  display_order, 
  active_flag
) VALUES
  (
    'Coordinator', 
    'Care coordinator responsible for scheduling, follow-ups, and member communication',
    '#1976d2',  -- Blue
    1, 
    true
  ),
  (
    'Admin', 
    'Administrative staff handling documentation, billing, and operational tasks',
    '#7b1fa2',  -- Purple
    2, 
    true
  ),
  (
    'Member', 
    'Program member responsible for completing their own tasks and activities',
    '#388e3c',  -- Green
    3, 
    true
  ),
  (
    'Practitioner', 
    'Healthcare practitioner providing clinical services and assessments',
    '#f57c00',  -- Orange
    4, 
    true
  ),
  (
    'Finance', 
    'Finance team handling payment processing and financial operations',
    '#d32f2f',  -- Red
    5, 
    true
  ),
  (
    'Vendor', 
    'External vendor responsible for product delivery or service provision',
    '#0097a7',  -- Cyan
    6, 
    true
  )
ON CONFLICT (role_name) DO NOTHING;

-- ============================================================================
-- 7. GRANT PERMISSIONS
-- ============================================================================

-- Grant appropriate permissions (following RLS policies)
GRANT SELECT, INSERT, UPDATE, DELETE ON public.program_roles TO authenticated;
GRANT ALL ON public.program_roles TO service_role;

-- Grant sequence permissions for auto-increment ID
GRANT USAGE, SELECT ON SEQUENCE program_roles_program_role_id_seq TO authenticated;
GRANT ALL ON SEQUENCE program_roles_program_role_id_seq TO service_role;

COMMIT;

-- ============================================================================
-- ROLLBACK SCRIPT (for reference, do not execute)
-- ============================================================================

-- BEGIN;
-- DROP TRIGGER IF EXISTS update_program_roles_timestamp ON public.program_roles;
-- DROP POLICY IF EXISTS service_role_bypass_program_roles ON public.program_roles;
-- DROP POLICY IF EXISTS authenticated_access_program_roles ON public.program_roles;
-- DROP TABLE IF EXISTS public.program_roles CASCADE;
-- COMMIT;


